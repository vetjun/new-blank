// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rdregu4mMb4hXErVfc3qjL
// Component: t2ViKBu55f
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: rdregu4mMb4hXErVfc3qjL/projectcss
import sty from "./PlasmicFetcher.module.css"; // plasmic-import: t2ViKBu55f/css

export type PlasmicFetcher__VariantMembers = {};

export type PlasmicFetcher__VariantsArgs = {};
type VariantPropType = keyof PlasmicFetcher__VariantsArgs;
export const PlasmicFetcher__VariantProps = new Array<VariantPropType>();

export type PlasmicFetcher__ArgsType = {};
type ArgPropType = keyof PlasmicFetcher__ArgsType;
export const PlasmicFetcher__ArgProps = new Array<ArgPropType>();

export type PlasmicFetcher__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultFetcherProps {
  className?: string;
}

function PlasmicFetcher__RenderFunc(props: {
  variants: PlasmicFetcher__VariantsArgs;
  args: PlasmicFetcher__ArgsType;
  overrides: PlasmicFetcher__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFetcher__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFetcher__VariantsArgs;
    args?: PlasmicFetcher__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFetcher__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFetcher__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFetcher__ArgProps,
      internalVariantPropNames: PlasmicFetcher__VariantProps
    });

    return PlasmicFetcher__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFetcher";
  } else {
    func.displayName = `PlasmicFetcher.${nodeName}`;
  }
  return func;
}

export const PlasmicFetcher = Object.assign(
  // Top-level PlasmicFetcher renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFetcher
    internalVariantProps: PlasmicFetcher__VariantProps,
    internalArgProps: PlasmicFetcher__ArgProps
  }
);

export default PlasmicFetcher;
/* prettier-ignore-end */
